@page "/"
@using Lahckoko.Core.Models
@using Lahckoko.Core.Scale
@inject IJSRuntime JsRuntime;
@inject ITemperatureService TemperatureService;

<h3>D3CodeHandled</h3>

@DateTime
@TempValue

<svg id="d3-svg" width="@Width" height="@Height">

</svg>

@code {

    private DateTime DateTime { get; set; }
    private double TempValue { get; set; }
    private TemperaturePoint2D[] TemperaturePoints { get; set; }

    public int Width { get; set; } = 500;
    public int Height { get; set; } = 500;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            TemperaturePoints = await TemperatureService.GetTemperatureAsync();
            var first = TemperaturePoints.First();
            DateTime = first.X;
            TempValue = first.Y;

            var dateTimeScale = new DateTimeLinearScale(TemperaturePoints.Select(x => x.X).ToArray(), new double[] { 0, 1 });
            var linearScale = new DoubleLinearScale(new double[] { 0, 20 }, new double[] { 0, 1 });
            var scaledPoints = TemperaturePoints.Select(x => new D3.Point(dateTimeScale.Scale(x.X), linearScale.Scale(x.Y))).ToList();

            await JsRuntime.InvokeVoidAsync("d3DrawFunctionsJS.setSvg", "#d3-svg");

            //const int length = 100;
            //var random = new Random();
            //var xAxis = Enumerable.Range(0, length).Select(x => ((double)x) / 100).ToArray();
            //var yAxis = Enumerable.Range(0, length).Select(x => 0.3 + random.NextDouble() * 0.7).ToArray();

            //var points = new List<D3.Point>();
            //for (var i = 0; i < length; i++)
            //{
            //    points.Add(new D3.Point(xAxis[i], yAxis[i]));
            //}

            await JsRuntime.InvokeVoidAsync("d3DrawFunctionsJS.drawPolygon", ToCircular(scaledPoints));
            //await JsRuntime.InvokeVoidAsync("d3DrawFunctionsJS.drawPolygon", ToCircular(points));
        }
        StateHasChanged();
    }

    public List<D3.Point> ToCircular(List<D3.Point> points)
    {
        var list = new List<D3.Point>();
        foreach (var p in points)
        {
            const double pi = Math.PI;
            var y = Math.Cos(p.x * 2 * pi) * p.y;
            var x = Math.Sin(p.x * 2 * pi) * p.y;
            list.Add(new D3.Point(x, y));
        }

        return list;
    }
}
