@page "/"
@using Lahckoko.Blazor.Services.Temperature
@using Lahckoko.Core.Models
@using Lahckoko.Core.Scale
@inject IJSRuntime JsRuntime;
@inject ITemperatureService TemperatureService;

<h3>D3CodeHandled</h3>

<svg id="d3-svg" width="@Width" height="@Height">

</svg>

<style>
    polygon {
        fill: CadetBlue
    }
</style>

@code {

    private TemperaturePoint2D[] TemperaturePoints { get; set; }

    public int Width { get; set; } = 500;
    public int Height { get; set; } = 500;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            TemperaturePoints = await TemperatureService.GetTemperatureAsync();

            var dateTimeScale = new DateTimeLinearScale(TemperaturePoints.Select(x => x.X).ToArray(), new [] { 0.0, 1.0 });
            var temperatureScale = new LinearScale(new[] { 0, TemperaturePoints.Max(x => x.Y) + 5 }, new [] { 0.0, 1.0 });
            var scaledPoints = TemperaturePoints.Select(p => new Point2D(dateTimeScale.Scale(p.X), temperatureScale.Scale(p.Y))).ToList();

            //TODO: Convert to Injectable Transformation or something similar:
            var xScale = new LinearScale(new [] { -1.0, 1.0 }, new [] { 0.0, Width });
            var yScale = new LinearScale(new [] { -1.0, 1.0 }, new [] { Height, 0.0 });
            var circularPoints = ToCircular(scaledPoints).Select(p => new Point2D(xScale.Scale(p.X), yScale.Scale(p.Y)));

            await JsRuntime.InvokeVoidAsync("d3DrawFunctionsJS.setSvg", "#d3-svg");
            await JsRuntime.InvokeVoidAsync("d3DrawFunctionsJS.drawPolygon", circularPoints);
        }
        StateHasChanged();
    }

    public List<Point2D> ToCircular(List<Point2D> points)
    {
        var list = new List<Point2D>();
        foreach (var p in points)
        {
            const double pi = Math.PI;
            var y = Math.Cos(p.X * 2 * pi) * p.Y;
            var x = Math.Sin(p.X * 2 * pi) * p.Y;
            list.Add(new Point2D(x, y));
        }

        return list;
    }
}
