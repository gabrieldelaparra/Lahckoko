@page "/"
@inject IGeoLocationService GeoLocationService;
@inject IJSRuntime JsRuntime;

<h3>Component1</h3>

<div>
    Lat: @Location?.Latitude <br />
    Long: @Location?.Longitude <br />
    Accuracy: @Location?.Accuracy <br />
</div>

@*<svg width="@Width" height="@Height" >
        <polygon points="100,100 100,300 300,300 300,100" onclick="" onmouseover="@MouseOver())" />
    </svg>*@

@code {

    private int Width { get; set; } = 500;
    private int Height { get; set; } = 500;

    private Location Location { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void HandleLocationReceived(Location location)
    {
        Location = location;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            //var window = await JsRuntime.Window();
            //var navigator = await window.Navigator();
            //geolocationWrapper = navigator.Geolocation;

            //var val = await GeoLocationService.RequestGeoLocationModel();

            //StateHasChanged();
            Location = await GeoLocationService.GetGeoLocationAsync();
            StateHasChanged();

            //const int length = 100;

            //var random = new Random();
            //var xAxis = Enumerable.Range(0, length).Select(x => ((double)x) / 100 * 2 - 1).ToArray();
            //var yAxis = Enumerable.Range(0, length).Select(x => random.NextDouble() * 2 - 1).ToArray();

            //var points = new List<Point>();
            //for (var i = 0; i < length; i++)
            //{
            //    points.Add(new Point(xAxis[i], yAxis[i]));
            //}

            //await JsRuntime.InvokeVoidAsync("d3DrawFunctionsJS.d3Draw", points);
        }
    }

    //private Dictionary<DateTime, double> Values { get; set; }

    //private List<Point> points = new List<Point> {
    //    new Point(1, -247.274),
    //    new Point(2, -663.172),
    //    new Point(3, -880.411),
    //    new Point(4, -854.185),
    //    new Point(5, -589.903),
    //    new Point(6, -142.074),
    //    new Point(7, 396.933),
    //    new Point(8, 915.949),
    //    new Point(9, 1307.922)
    //};

    public class Point
    {
        public Point(double x, double y)
        {
            this.x = x;
            this.y = y;
        }
        public double x { get; set; }
        public double y { get; set; }
    }

    //private object MouseOver()
    //{
    //    Console.WriteLine("Over");
    //    return "null";
    //}

}
