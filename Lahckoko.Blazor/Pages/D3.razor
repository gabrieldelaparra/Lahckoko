@page "/d3"
@using Lahckoko.Blazor.Services.GeoLocation
@using Lahckoko.Core.Models
@using Lahckoko.Blazor.Models
@inject IGeoLocationService GeoLocationService;
@inject IJSRuntime JsRuntime;

<h3>Component1</h3>

<div>
    Lat: @Location?.Latitude <br />
    Long: @Location?.Longitude <br />
    Accuracy: @Location?.Accuracy <br />
</div>

@*<svg width="@Width" height="@Height" >
        <polygon points="100,100 100,300 300,300 300,100" onclick="" onmouseover="@MouseOver())" />
    </svg>*@

@code {

    private int Width { get; set; } = 500;
    private int Height { get; set; } = 500;

    private Location Location { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void HandleLocationReceived(Location location)
    {
        Location = location;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {

            Location = await GeoLocationService.GetGeoLocationAsync();
            StateHasChanged();

            const int length = 100;

            var random = new Random();
            var xAxis = Enumerable.Range(0, length).Select(x => ((double)x) / 100 ).ToArray();
            var yAxis = Enumerable.Range(0, length).Select(x => random.NextDouble()).ToArray();

            var points = new List<Point2D>();
            for (var i = 0; i < length; i++)
            {
                points.Add(new Point2D(xAxis[i], yAxis[i]));
            }

            await JsRuntime.InvokeVoidAsync("d3DrawFunctionsJS.d3Draw", points);
        }
    }
}
